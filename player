#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from time import sleep
from radio import Radio
from yandex_music import Client

import threading
import sys
import vlc
from urllib import request

TOKEN = 'y0_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'

darktheme = '''
List{
    background-color: gray;
}
App{
    background-color: gray;
}
QScrollBar{
    width: 15px;
    background-color: gray;
}
QPlainTextEdit{
    background-color: black;
    font: 700 12pt \"Arial\";
    padding: 8px;
    color: green;
    border-radius: 10px;
}
QListWidget{
    background-color: black;
    font: 700 12pt \"Arial\";
    padding: 8px;
    color: green;
    border-radius: 10px;
    selection-color: white;
    selection-background-color: darkblue;
}
QPushButton{
    background-color: blue;
}
'''
            
class App(QMainWindow):
    mysignal = pyqtSignal(str, name='mySignal')
    progress = pyqtSignal()
    stationNum = 0
    urlText = "NONE"

    def __init__(self):
        super(App, self).__init__()
        self.title = 'Yandex Radio'
        self.left = 10
        self.top = 10
        self.width = 700
        self.height = 250
        self.inst = vlc.Instance('--quiet')
        self.player = self.inst.media_player_new()
        self.player.audio_set_volume(50)
        self.proc = threading.Thread(target=self.play, args=())
        self.mysignal.connect(self.mySignalHandler)
        self.progress.connect(self.updateProgressBar)
        self.playNext = False
        self.pausePlayer = False
        self.exitApp = False
        self.Position = self.frameGeometry().topLeft()
        self.initUI()

    def initUI(self):
        self.setWindowTitle(self.title)
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.round_widget = QWidget(self)
        self.round_widget.resize(700, 250)
        self.round_widget.setStyleSheet(
            """
            border-radius: 10px;
            background-color: gray;
            """
        )
        self.setGeometry(self.left, self.top, self.width, self.height)
        self.setStyleSheet(darktheme)
        self.setFixedSize(self.width, self.height)
        self.setWindowFlag(Qt.WindowCloseButtonHint, False)
        screen = QApplication.desktop().screenNumber(
            QApplication.desktop().cursor().pos())
        centerPoint = QApplication.desktop().screenGeometry(screen).center()
        self.Geometry = self.frameGeometry()
        self.Geometry.moveCenter(centerPoint)
        self.Position = self.Geometry.topLeft()
        self.move(self.Position)

        self.list = List()
        self.picture = Picture()
        
        self.oldPos = self.pos()
        self.lcd = QLCDNumber(self)
        self.lcd.setSegmentStyle(QLCDNumber.Flat)
        self.lcd.setSmallDecimalPoint(False)
        self.lcd.setDigitCount(3)
        self.lcd.display(50)
        self.lcd.move(555, 150)
        self.lcd.setFrameStyle(QFrame.Panel | QFrame.Plain)
        self.lcd.setLineWidth(0)

        self.slider = QSlider(Qt.Orientation.Horizontal, self)
        self.slider.setRange(0, 100)
        self.slider.setSingleStep(1)
        self.slider.setValue(50)
        self.slider.setTickPosition(QSlider.TickPosition.TicksBelow)
        self.slider.move(480, 150)

        self.textbox = QPlainTextEdit(self)
        self.textbox.move(10, 5)
        self.textbox.resize(550, 130)
        self.textbox.setStyleSheet(darktheme)
        self.textbox.setDisabled(True)
        
        self.labelPix = QLabel(self)
        self.pixmap = QPixmap()
        self.labelPix.setPixmap(self.pixmap)
        self.labelPix.move(570,10)
        self.labelPix.resize(120,120)
        self.labelPix.installEventFilter(self)
        
        self.buttonPlay = QPushButton('Play', self)
        self.buttonPlay.move(15, 150)
        self.buttonPlay.setStyleSheet(darktheme)

        self.buttonPause = QPushButton('Pause', self)
        self.buttonPause.move(130, 150)
        self.buttonPause.setStyleSheet(darktheme)

        self.buttonNext = QPushButton('Next', self)
        self.buttonNext.move(245, 150)
        self.buttonNext.setStyleSheet(darktheme)

        self.buttonExit = QPushButton('Exit', self)
        self.buttonExit.move(360, 150)
        self.buttonExit.setStyleSheet(darktheme)

        self.buttonList = QPushButton('L', self)
        self.buttonList.move(650, 150)
        self.buttonList.resize(30, 30)
        self.buttonList.setStyleSheet(darktheme)
        
        self.currentTimeLabel = QLabel('00:00',self)
        self.currentTimeLabel.move(15, 200)
        self.currentTimeLabel.resize(50, 30)
        
        self.durationLabel = QLabel('00:00',self)
        self.durationLabel.move(650, 200)
        self.durationLabel.resize(50, 30)

        self.positionslider = QSlider(Qt.Orientation.Horizontal, self)
        self.positionslider.setToolTip("Position")
        self.positionslider.setMaximum(1000)
        self.positionslider.move(60,200)
        self.positionslider.resize(580,30)

        self.positionslider.sliderMoved.connect(self.set_position)
        self.positionslider.sliderPressed.connect(self.set_position)

        self.buttonNext.clicked.connect(self.onClickNext)
        self.buttonPlay.clicked.connect(self.onClickPlay)
        self.buttonExit.clicked.connect(self.onClickExit)
        self.buttonPause.clicked.connect(self.onClickPause)
        self.buttonList.clicked.connect(self.onClickList)

        self.slider.valueChanged.connect(self.updateSlider)

    def eventFilter(self, obj, event):
        if obj == self.labelPix:
            if event.type() == QEvent.MouseButtonPress:
                mouseEvent = QMouseEvent(event)
                if mouseEvent.buttons() == Qt.LeftButton:
                    pos = QPoint(self.geometry().x()+720, self.geometry().y())
                    self.picture.move(pos)
                    self.picture.show()
                elif mouseEvent.buttons() == Qt.RightButton:
                    self.picture.hide()

        return QMainWindow.eventFilter(self, obj, event)
                  
    def updateProgressBar(self):
        currentTime = vlc.libvlc_media_player_get_time(self.player)
        minutes1, seconds1 = divmod(currentTime / 1000, 60)
        self.currentTimeLabel.setText(f'{minutes1:0>2.0f}:{seconds1:0>2.0f}')
        duration = vlc.libvlc_media_player_get_length(self.player)
        minutes2, seconds2 = divmod(duration / 1000, 60)
        self.durationLabel.setText(f'{minutes2:0>2.0f}:{seconds2:0>2.0f}')
        media_pos = int(self.player.get_position() * 1000)
        self.positionslider.setValue(media_pos)
 
    def mousePressEvent(self, event):
        self.oldPos = event.globalPos()

    def mouseMoveEvent(self, event):
        delta = QPoint (event.globalPos() - self.oldPos)
        self.move(self.x() + delta.x(), self.y() + delta.y())
        self.oldPos = event.globalPos()
        isvisible = self.list.isVisible()
        if isvisible == True:
            pos = QPoint(self.geometry().x(), self.geometry().y()+260)
            self.list.move(pos)
            self.list.show()
        isvisible = self.picture.isVisible()
        if isvisible == True:
            pos = QPoint(self.geometry().x()+720, self.geometry().y())
            self.picture.move(pos)
            self.picture.show()
            
    def set_position(self):
        pos = self.positionslider.value()
        self.player.set_position(pos / 1000.0)

    @pyqtSlot()
    def updateSlider(self):
        self.player.audio_set_volume(self.slider.value())
        self.lcd.display(self.slider.value())

    def mySignalHandler(self, data):
        if data == 'NEW':
            self.textbox.clear()
            if App.urlText != "NONE":
                self.picture.text = App.urlText
                data = request.urlopen(self.picture.text).read()
                self.picture.pixmaps.loadFromData(data)
                self.picture.labelPicture.setPixmap(self.picture.pixmaps)
                self.picture.labelPicture.show()
            return
        self.textbox.appendPlainText(data)

    def play(self):
        client = Client(TOKEN)
        radio = Radio(client)
        while self.exitApp == False:
            try:
                _stations = client.rotor_stations_list()
                if App.stationNum == len(_stations):
                    _station_id = 'user:onyourwave'
                    _station_from = None
                else:
                    _station = _stations[App.stationNum].station
                    _station_id = f'{_station.id.type}:{_station.id.tag}'
                    _station_from = _station.id_for_from
                track = radio.start_radio(_station_id, _station_from)
                track = radio.play_next()
                cover = track.cover_uri
                if cover:
                   text = f'https://{cover.replace("%%", "120x120")}'
                   data = request.urlopen(text).read()
                   self.pixmap.loadFromData(data)
                   self.labelPix.setPixmap(self.pixmap)
                   self.labelPix.show()
                   App.urlText = f'https://{cover.replace("%%", "400x400")}'
                self.mySignal.emit('NEW')
                if App.stationNum == len(_stations):
                    self.mySignal.emit('Station:  ' + ' My wave')
                else:
                    self.mySignal.emit('Station:  ' + _station.name)
                self.mySignal.emit(
                    'Artist:     ' + ' | '.join(a.name for a in track.artists))
                self.mySignal.emit(
                    'Album:   ' + ' | '.join(a.title for a in track.albums))
                self.mySignal.emit('Title:       ' + track.title)
                try:
                    if track.download_info is None:
                        track.get_download_info()
                        for info in track.download_info:
                            if info.codec == 'mp3' and info.bitrate_in_kbps == 320:
                                link = info.get_direct_link()
                                break
                except Exception as e:
                    print('Error:', e)
                    sleep(1)
                media = self.inst.media_new(link)#'http://nashe1.hostingradio.ru/nashe-128.mp3')
                self.player.set_media(media)
                self.player.play()
                while True:
                    state = self.player.get_state()
                    if state == vlc.State.Ended or self.playNext == True or self.exitApp == True:
                        self.playNext = False
                        break
                    self.progress.emit()
                    sleep(1)
                self.player.stop()
            except Exception as e:
                print('Error:', e)
                sleep(1)
        app.exit()

    @pyqtSlot()
    def onClickList(self):
        isvisible = self.list.isVisible()
        if isvisible == False:
            pos = QPoint(self.geometry().x(), self.geometry().y()+260)
            self.list.move(pos)
            self.list.show()
        else:
            self.list.hide()

    @pyqtSlot()
    def onClickPlay(self):
        self.buttonPlay.setEnabled(False)
        self.proc.start()

    @pyqtSlot()
    def onClickNext(self):
        self.playNext = True

    @pyqtSlot()
    def onClickExit(self):
        self.exitApp = True
        app.exit()

    @pyqtSlot()
    def onClickPause(self):
        if self.pausePlayer == False:
            self.player.pause()
            self.pausePlayer = True
            self.buttonPause.setText('Play')
        else:
            self.player.play()
            self.pausePlayer = False
            self.buttonPause.setText('Pause')

class Picture(QMainWindow):

    def __init__(self):
        super(Picture, self).__init__()
        self.resize(420, 420)
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.round_widget = QWidget(self)
        self.round_widget.resize(420, 420)
        self.round_widget.setStyleSheet(
            """
            border-radius: 10px;
            background-color: gray;
            """
        )
        self.labelPicture = QLabel(self)
        self.pixmaps = QPixmap()
        self.labelPicture.resize(400,400)
        self.labelPicture.move(10,10)
        if App.urlText != "NONE":
            self.text = App.urlText
            data = request.urlopen(self.text).read()
            self.pixmaps.loadFromData(data)
            self.labelPicture.setPixmap(self.pixmaps)
            self.labelPicture.show()

class List(QMainWindow):

    def __init__(self):
        super(List, self).__init__()
        
        self.resize(700, 250)
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.round_widget = QWidget(self)
        self.round_widget.resize(700, 250)
        self.round_widget.setStyleSheet(
            """
            border-radius: 10px;
            background-color: gray;
            """
        )
        self.listWidget = QListWidget(self)
        self.listWidget.move(10, 5)
        self.listWidget.resize(680, 240)
        client = Client(TOKEN)
        _stations = client.rotor_stations_list()
        for i in range(len(_stations)):
            _station = _stations[i].station
            item = QListWidgetItem()
            item.setText(str(i+1) + "   " + _station.name)
            self.listWidget.insertItem(i, item)
        item = QListWidgetItem()
        item.setText(str(len(_stations)+1) + "   " + 'My wave')
        self.listWidget.insertItem(len(_stations), item)
        self.listWidget.itemDoubleClicked.connect(self.Clicked)

    def Clicked(self, item):
        num = self.listWidget.row(item)
        App.stationNum = num

if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setStyleSheet(darktheme)
    application = App()
    application.show()
    app.exec()
